


keys = (list
  (list "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P")
  (list "A" "S" "D" "F" "G" "H" "J" "K" "L")
  (list "Z" "X" "C" "V" "B" "N" "M" )
)

to_uppercase = { key -> 
  lowercase = "abcdefghijklmnopqrstuvwxyz"
  uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  index = (find lowercase key)
  <- (if (is index void){
    <- key
  }{
    <- (get uppercase index) 
  })
}

to_lowercase = { key -> 
  lowercase = "abcdefghijklmnopqrstuvwxyz"
  uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  index = (find uppercase key)
  <- (if (is index void){
    <- key
  }{
    <- (get lowercase index) 
  })
}

set_background = { letter_status item ->
  <- (if (is letter_status 2) {
    // green
    <- (background 2 item)
  } (is letter_status 1) {
    // yellow
    <- (background 3 item)
  } {
    <- (background 8 item)
  })
}

get_letter_status = { letter pos answer ->
  <- (if (is pos void) {
    <- 0
  } {
    <- (if (is (get answer pos) letter) {
      // green
      <- 2
    } (not (is (find answer letter) void)) {
      // yellow
      <- 1
    } {
      <- 0
    })
  })
}

is_valid_key = { keypress_name ->
  letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  <- (not (is (find letters keypress_name) void))
}

mutaute_state_on_input = { state keypress_name ->
  <- (if (is (get state INPLAY) 6) {
    // TODO end game things
    <- state
  } {
    // TODO: Check win
    line_in_play = (get (get state STATUS) (get state INPLAY))
    index = (find line_in_play " ")
    uppercase_keypress_name = (to_uppercase keypress_name)

    <- (if (and (is_valid_key uppercase_keypress_name) (not (is index void))){
      // inserting letter
      typed_in = (set line_in_play uppercase_keypress_name index)
      status = (set (get state STATUS) typed_in (get state INPLAY))
      
      <- (set state status STATUS)
    } (and (is uppercase_keypress_name  "\n") (is (find line_in_play " ") void)) {
      // next line
      // check word is valid
      word = (reduce line_in_play { accum item index -> <- (join accum item) } "")
      <- (if (is (find valid_words word) void) {
        <- state
      } {
        used = (reduce line_in_play { accum item index ->
          <- (if (is (find accum item) void) { <- (insert accum item) } { <- accum })
        } (get state USED))

        state = (set state used USED)
        <- (set state (add (get state INPLAY) 1) INPLAY)
      })
    } (and (is uppercase_keypress_name  "delete") (not (is (get line_in_play 0) " "))) {
      // deleting letter
      typed_in = (if (not (is index void)) {
        <- (set line_in_play " " (subtract index 1))
      } {
        <- (set line_in_play " " 4)
      } )
      status = (set (get state STATUS) typed_in (get state INPLAY))
      <- (set state status STATUS)
    } {
      // any key not part of the game
      <- state
    })
  })
}

create_element_key = { x y letter ->
  props = (list
    (add x 30)
    (add y 10)
    (list 
      (list "┌""─""┐")
      (list "│" letter "│")
      (list "└""─""┘")
    )
  )

  on_state = {
    element = (get elements listener_index)
    props = (get element 0)
    look = (get props 2)
    letter = (get (get look 1) 1)


    look = (if (is (find (get state USED) letter) void) {
      <- look
    } {
      final_letter_status = (reduce (get state STATUS) {accum word_line index ->
        // only change key look after word is submitted
        <- (if (less_than index (get state INPLAY)) {
          guessed_pos = (find word_line letter)
          letter_status = (get_letter_status letter guessed_pos (get state ANSWER))

          <- (if (greater_than letter_status accum){
            <- letter_status
          }{
            <- accum
          })
        }{
          <- accum
        })
      } 0)

      <- (set_background final_letter_status look)
    })

    (draw (set props look 2))
    <- state
  }

  on_click = {
    element = (get elements listener_index)
    props = (get element 0)

    <- (if (is (mouse_over props mouse_xy) 1) {
      look = (get props 2)
      letter = (get (get look 1) 1)

      <- (mutaute_state_on_input state letter)
    } {
      <- state
    })

    <- state
  }

  <- (list props (list on_state void void void on_click))
}

enter_key = ({
  props = (list
    30
    16
    (list 
      (list "┌""─""─""─""┐")
      (list "│"" ""↩"" ""│")
      (list "└""─""─""─""┘")
    )
  )

  on_click = {
    props = (get enter_key 0)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (mutaute_state_on_input state "\n")
    } {
      <- state
    })

    <- state
  }

  <- (list props (list void void void void on_click))
})

delete_key = ({
  props = (list
    56
    16
    (list 
      (list "┌""─""─""┐")
      (list "│"" ""⌫""│")
      (list "└""─""─""┘")
    )
  )

  on_click = {
    props = (get delete_key 0)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (mutaute_state_on_input state "delete")
    } {
      <- state
    })

    <- state
  }

  <- (list props (list void void void void on_click))
})

board = ({
  props = (list
    1
    1
    (list 
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
    )
  )

  on_keypress = {
    <- (mutaute_state_on_input state keypress_name)
  }

  on_state = {
    props = (get board 0)

    mapped = (map (get props 2) {row row_index -> 
      <- (map row { item index ->
        r =  (integer (divide row_index 3))
        c =  (integer (divide index 5))
        letter = (get (get (get state STATUS) r) c)

        <- (if (and (is (remainder row_index 3) 1) (is (remainder index 5) 2) ) {
          <- (if (is (get state INPLAY) r) {
              <- (if (is letter " ") {
                <- letter
              } {
                <- letter
              })
          }{
            <- (if (is letter " ") {
              <- letter
            } {
              letter_status = (get_letter_status letter c (get state ANSWER))
              <- (set_background letter_status letter)
            })
          })
        }{
          <- (if (is (get state INPLAY) r) {
            <- item
          }{
            <- (if (is letter " ") {
              <- item
            } {
              letter_status = (get_letter_status letter c (get state ANSWER))
              <- (set_background letter_status item)
            })
          })
        })
      })
    })
    
    (draw (set props mapped 2))

    <- state
  }

  <- (list props (list on_state void on_keypress void void))
})

kb = (reduce keys { line_accum key_line line_index ->
  <- (reduce key_line { accum item index -> 
    <- (insert accum (create_element_key (add (multiply line_index 2) (integer (divide line_index 2)) (multiply index 3)) (multiply line_index 3) item)) 
  } line_accum)
} (list))
kb = (insert kb enter_key)
kb = (insert kb delete_key)

elements = (insert kb board)
