//*** utility functions shared by event functions

// returns a props list where x and y are in relation to the app's x y
// and the look is either as supplied or as default for element.
// used by all elements
dynamic_props = { element look ->
  <-(if (is (type state) "string" ){
    <- (list 0 0 "")
  }{
    xy = (get state APP_XY)
    props = (get element 0)

    x = (add (get xy 0) (get props 0))
    y = (add (get xy 1) (get props 1))

    <- (if (or
      (less_than (get (get state APP_XY) X) 0)
      (less_than (get (get state APP_XY) Y) 0)
    ) {
      <- (list x y "")
    } {
      <- (if (is look void) {
        <- (list x y (get (get element 0) 2))
      } {
        <- (list x y look)
      })
    })
  })
}

str_to_arr = { str ->
  <- (map (range 5) {index _ -> <- (get str index)})
}

sum = { arr ->
  <- (reduce arr {accum item _ -> <- (add accum item)} 0)
}

max_positive = { arr ->
  <- (reduce arr {accum item _ -> <- (if (greater_than accum item) { <- accum } { <- item }) } 0)
}

to_uppercase = { key -> 
  lowercase = "abcdefghijklmnopqrstuvwxyz"
  uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  index = (find lowercase key)
  <- (if (is index void){
    <- key
  }{
    <- (get uppercase index) 
  })
}

to_lowercase = { key -> 
  lowercase = "abcdefghijklmnopqrstuvwxyz"
  uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  index = (find uppercase key)
  <- (if (is index void){
    <- key
  }{
    <- (get lowercase index) 
  })
}

// game rules
wordle_highlight = { guess_arr answer_arr ->
  exact = 2
  exists = 1
  does_not_exist = 0

  // first step - "punch" correct matches out of possible"
  answer_map = (map answer_arr {item index -> 
    <- (if (is item (get guess_arr index)) {
      <- "-"
    }{
      <- item
    })
  })

  // second step "reduce" array into a list that remembers the punching
  <- (get
    (reduce guess_arr { accum guess_item guess_index ->
      curr__answer_map = (get accum 1)
      curr_result = (get accum 0)

      <- (if (is guess_item (get answer_arr guess_index)) {
        <- (list (insert curr_result exact) curr__answer_map)
      } (is (find answer_arr guess_item) void) {
        <- (list (insert curr_result does_not_exist) curr__answer_map)
      } {
        answer_index = (find (get accum 1) guess_item)
        <- (if (is answer_index void) {
        <- (list (insert curr_result does_not_exist) curr__answer_map)
        }{
          <- (list (insert curr_result exists) (set curr__answer_map "-" answer_index ))
        })
      }) 
    } (list (list) answer_map))
  0)
}

get_letter_status = { letter pos guess_arr answer_arr ->
  <- (get (wordle_highlight guess_arr answer_arr) pos)
}

set_background = { letter_status item ->
  <- (if (is letter_status 2) {
    // green
    <- (background 2 item)
  } (is letter_status 1) {
    // yellow
    <- (background 3 item)
  } {
    <- (background 8 item)
  })
}

is_valid_key = { keypress_name ->
  letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  <- (not (is (find letters keypress_name) void))
}

mutaute_state_on_input = { state keypress_name ->
  <- (if (is (get state GAME) 0) { // in play
    index_in_play = (get state INPLAY)
    line_in_play = (get (get state STATUS) index_in_play)
    index = (find line_in_play " ")
    uppercase_keypress_name = (to_uppercase keypress_name)

    <- (if (and (is_valid_key uppercase_keypress_name) (not (is index void))){
      // inserting letter
      typed_in = (set line_in_play uppercase_keypress_name index)
      status = (set (get state STATUS) typed_in index_in_play)
      
      <- (set state status STATUS)
    } (and (is uppercase_keypress_name  "\n") (is (find line_in_play " ") void)) {
      // next line
      // check word is valid
      word = (reduce line_in_play { accum item index -> <- (join accum item) } "")
      <- (if (is (find valid_words word) void) {
        // not valid
        (invalid_word_animator) // animate
        <- state
      } {
        (reveal_animator) // animate

        used = (reduce line_in_play { accum item index ->
          <- (if (is (find accum item) void) { <- (insert accum item) } { <- accum })
        } (get state USED))

        state =  (if (is word (get state ANSWER)) { // win
          // set next word
          state = (set state (add (get state WORD_INDEX) 1) WORD_INDEX)
          // update win stats
          // results
          state = (set state (set (get state RESULTS) (add (get (get state RESULTS) index_in_play) 1) index_in_play ) RESULTS)
          // streak
          state = (set state (set (get state STREAK) (add (get (get state STREAK) 0) 1) 0) STREAK)
          state = (if (greater_than (get (get state STREAK) 0) (get (get state STREAK) 1)) {
            <- (set state (set (get state STREAK) (get (get state STREAK) 0) 1) STREAK)
          }{
            <- state
          }) 

          <- (set state 1 GAME)
        } (is (get state INPLAY) 5) { // last attempt - lost
          // update win stats
          // results
          state = (set state (set (get state RESULTS) (add (get (get state RESULTS) 6) 1) 6 ) RESULTS)
          // streak
          state = (set state (set (get state STREAK) 0 0) STREAK)

          <- (set state 2 GAME)
        } {
          <- state
        })

        state = (set state used USED)
        state = (set state (add index_in_play 1) INPLAY)
        <- state
      })
    } (and (is uppercase_keypress_name  "delete") (not (is (get line_in_play 0) " "))) {
      // deleting letter
      typed_in = (if (not (is index void)) {
        <- (set line_in_play " " (subtract index 1))
      } {
        <- (set line_in_play " " 4)
      } )
      status = (set (get state STATUS) typed_in (get state INPLAY))
      <- (set state status STATUS)
    } {
      // any key not part of the game
      <- state
    })
  } {
    <- (if (is keypress_name "\n") {
      <- (mutaute_state_new_game)
    } {
      <- state
    })
  })
}

mutaute_state_new_game = {
  state = (set state 0 GAME)
  state = (set state (get play_words (multiply (get state WORD_INDEX) 6)  (add (multiply (get state WORD_INDEX) 6) 5)) ANSWER) // word in play)
  state = (set state     (list
    (list " " " " " " " " " ")
    (list " " " " " " " " " ")
    (list " " " " " " " " " ")
    (list " " " " " " " " " ")
    (list " " " " " " " " " ")
    (list " " " " " " " " " ")
  ) STATUS)
  state = (set state 0 INPLAY)
  state = (set state (list) USED)
  <- state
}
//***  settings
app_width = 80
app_height = 24

//***  elements
centered_modal = ({
  props = (list 0 0 "")

  on_state = {
    (if (or
      (less_than (get (get state APP_XY) X) 0)
      (less_than (get (get state APP_XY) Y) 0)
    ) {
      look = (map (range (subtract (rows) 0)) { _ index ->
        <- (if (is index (integer (divide (rows) 2))) {
          r = (map (range (subtract (columns) 0)) { _ _ -> <- " " })
          point = (subtract (integer (divide (columns) 2)) 12)
          point = (if (less_than point 0) {
            <- 0
          }{
            <- point
          })
          <- (set r "Enlarge Terminal Window" point)
        } {
          <- (map (range (subtract (columns) 0)) { _ _ ->
            <- " "
          })
        })
      })

      (draw (list 0 0 look))
    } {
      (draw (list 0 0 ""))
    })

    <- state
  }

  <- (list void (list on_state void void void void))
})

// utility element with no visible look.
// clears screen on resize, handles app exit, "mouse out" of pickers.
screen = ({
  props = (list 
    0
    0
    ""
  )

  on_loop = {
    x = (integer (divide (subtract (columns) app_width) 2)) // center position on x
    y = (integer (divide (subtract (rows) app_height) 2))// center position on y

    curr = (list x y)

    <- (if (is curr (get state APP_XY)){
      <- state
    } {
      (go_to 0 1)
      (clear_below)

      <- (set state (list x y) APP_XY)
    })
  }

  on_state = {
    (draw (dynamic_props screen void))
    <- state
  }

  <- (list props (list on_state on_loop void void void))
})

// top title bar, resizable but not moving.
title = ({
  on_state = {
    look = (reduce (range (columns)) {accum _ _ -> <- (join accum " ") } "")
    look = (set look "Rewordle"  0)
    look = (inverse look)

    (draw (list 0 0 look))
    <- state
  }

  <- (list void (list on_state void void void void))
})

button_exit = ({
  props = (list
    0
    0
    // the look of  clickable elements must be in form of a 2d list
    (list
     (underline (list "E" "x" "i" "t"))
    )
  )

  on_state = {
    look = (get (get button_exit 0) 2)

    (draw (list (subtract (columns) 4) 0 look))
    <- state
  }

  on_click = {
    look = (get (get button_exit 0) 2)
    props = (list (subtract (columns) 4) 0 look)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- void
    } {
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})

button_next = ({
  props = (list
    75
    22
    // the look of clickable elements must be in form of a 2d list
    (list
     (underline (list "N" "e" "x" "t"))
    )
  )

  on_state = {
    (if (not (is (get state GAME) 0)) {
      (draw (dynamic_props button_next void))
    } {
      (draw (dynamic_props button_next "    "))
    })
    <- state
  }

  on_click = {
    <- (if (not (is (get state GAME) 0)) {
      props = (dynamic_props button_next void)

      <- (if (is (mouse_over props mouse_xy) 1) {
        <- (mutaute_state_new_game)
        <- state
      } {
        <- state
      })
    }{
      <- state
    })
  }

  <- (list props (list on_state void void void on_click))
})


replace = { in with at ->
  <- (if (and 
    (is (type in) "string")
    (is (type with) "string")
  ) {
    end = (if (greater_than (add at (length with)) (length in)) { 
      <- (length in) 
    } { 
      <- (add at (length with))
    })
    trimmed = (if (greater_than (subtract end at) 0) {
      <- (get with 0 (subtract end at))
    } {
      <- ""
    })
    cleaned = (if (less_than at end) {
      <- (delete in at end)
    }{
      <- in
    })
    
    <- (if (less_than at end) {
      <- (insert cleaned trimmed at)
    }{
      <- in
    })
  } (and 
    (is (type in) "list")
    (is (type with) "list")
  ) {
    <- (map in { item index -> 
      end = (add at (length with) )
      <- (if (and
        (greater_than index (subtract at 1))
        (less_than index end) 
      ) {
        <- (get with (subtract index at))
      } {
        <- item
      })
    })
  } {
    <- in
  })
}

reveal_animator = {
  props = (dynamic_props board void)
  index_in_play = (get state INPLAY)
  line_in_play = (get (get state STATUS) index_in_play)

  props = (list
    (get props X)
    (add (get props Y) (multiply index_in_play 3))
    (list
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list 
        "│"" " (get line_in_play 0) " ""│"
        "│"" " (get line_in_play 1) " ""│"
        "│"" " (get line_in_play 2) " ""│"
        "│"" " (get line_in_play 3) " ""│"
        "│"" " (get line_in_play 4) " ""│"
      )
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
    )
  )

  guess_arr = (get (get state STATUS) index_in_play)
  answer_arr = (str_to_arr (get state ANSWER))

  (reduce (range 5) { look item index -> 
    letter_status = (get_letter_status (get line_in_play index) index guess_arr answer_arr)

    top = (replace (get look 0) (list " "" "" "" "" ") (multiply index 5))
    middle = (replace (get look 1) (list "─""─""─""─""─") (multiply index 5))
    bottom = (replace (get look 2) (list " "" "" "" "" ") (multiply index 5))

    look = (list
      top
      middle
      bottom
    )

    props = (set props look 2)
    (draw props)
    (wait 0.3)

    top = (replace (get look 0) (set_background letter_status (list "┌""─""─""─""┐")) (multiply index 5))
    middle = (replace (get look 1) (set_background letter_status (list "│"" " (get line_in_play index) " ""│")) (multiply index 5))
    bottom = (replace (get look 2) (set_background letter_status (list "└""─""─""─""┘")) (multiply index 5))

    look = (list
      top
      middle
      bottom
    )

    props = (set props look 2)
    (draw props)
    (wait 0.3)

    <- look
  } (get props 2))
}

invalid_word_animator = {
  props = (dynamic_props board void)
  index_in_play = (get state INPLAY)
  line_in_play = (get (get state STATUS) index_in_play)

  props = (list
    (get props X)
    (add (get props Y) (multiply index_in_play 3))
    (list
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list 
        "│"" " (get line_in_play 0) " ""│"
        "│"" " (get line_in_play 1) " ""│"
        "│"" " (get line_in_play 2) " ""│"
        "│"" " (get line_in_play 3) " ""│"
        "│"" " (get line_in_play 4) " ""│"
      )
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
    )
  )

  props = (set props (add (get props X) 1) X)
  (draw props)
  (wait 0.05)

  props = (set props (subtract (get props X) 2) X)
  (draw props)
  (wait 0.05)

  props = (set props (add (get props X) 2) X)
  (draw props)
  (wait 0.05)

  props = (set props (subtract (get props X) 2) X)
  (draw props)
  (wait 0.05)

  eraser = (list
    (get props X)
    (get props Y)
    (list
      (list "                           ")
      (list "                           ")
      (list "                           ")
    )
  )
  (draw eraser)

  props = (set props (add (get props X) 1) X)
  (draw props)
  (wait 0.05)
}

board = ({
  props = (list
    9
    4
    (list 
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
      (list "┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐""┌""─""─""─""┐")
      (list "│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│""│"" "" "" ""│")
      (list "└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘""└""─""─""─""┘")
    )
  )

  on_keypress = {
    <- (mutaute_state_on_input state keypress_name)
  }

  on_state = {
    props = (get board 0)

    mapped = (map (get props 2) {row row_index -> 
      <- (map row { item index ->
        r =  (integer (divide row_index 3))
        c =  (integer (divide index 5))
        letter = (get (get (get state STATUS) r) c)
        guess_arr = (get (get state STATUS) r)
        answer_arr = (str_to_arr (get state ANSWER))

        <- (if (and (is (remainder row_index 3) 1) (is (remainder index 5) 2) ) {
          <- (if (is (get state INPLAY) r) {
              <- (if (is letter " ") {
                <- letter
              } {
                <- letter
              })
          }{
            <- (if (is letter " ") {
              <- letter
            } {
              letter_status = (get_letter_status letter c guess_arr answer_arr)
              <- (set_background letter_status letter)
            })
          })
        }{
          <- (if (is (get state INPLAY) r) {
            <- item
          }{
            <- (if (is letter " ") {
              <- item
            } {
              letter_status = (get_letter_status letter c guess_arr answer_arr)
              <- (set_background letter_status item)
            })
          })
        })
      })
    })

    (draw (dynamic_props board mapped))

    <- state
  }

  <- (list props (list on_state void on_keypress void void))
})

answer = ({
  props = (list
    30
    2
    (join "Wordle #" "1" "?????")
  )

  on_state = {
    // only redrew when change is relevant
    curr = (list (get state GAME) (get state APP_XY))
    prev = (if (is prev_state void) {
      <- void
    } {
      <- (list (get prev_state GAME) (get prev_state APP_XY))
    })

    (if (not (is curr prev)) {
      (if (is (get state GAME) 1) {
        // 1: Genius 2: Magnificent 3: Impressive 4: Splendid 5: Great 6: Phew
        index_in_play = (get state INPLAY)
        word_index = (get state WORD_INDEX)
        (if (is index_in_play 1) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Genius") "     ")
          (draw (dynamic_props answer mapped))
          (wait 1)
        } (is index_in_play  2) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Magnificent"))
          (draw (dynamic_props answer mapped))
          (wait 1)
        } (is index_in_play  3) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Impressive") " ")
          (draw (dynamic_props answer mapped))
          (wait 1)
        } (is index_in_play  4) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Splendid") "   ")
          (draw (dynamic_props answer mapped))
          (wait 1)
        } (is index_in_play  5) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Great") "      ")
          (draw (dynamic_props answer mapped))
          (wait 1)
        } (is index_in_play  6) {
          mapped = (join "Wordle #" (string word_index) " " (inverse "Phew") "       ")
          (draw (dynamic_props answer mapped))
          (wait 1)
        })
        mapped = (join "Wordle #" (string (get state WORD_INDEX)) " " (get state ANSWER) "      ")
        (draw (dynamic_props answer mapped))
      } (is (get state GAME) 2) {
        mapped = (join "Wordle #" (string (get state WORD_INDEX)) " " (inverse (get state ANSWER)) "      ")
        (draw (dynamic_props answer mapped))
      } {
        mapped = (join "Wordle #" (string (add (get state WORD_INDEX) 1)) " " "?????")
        (draw (dynamic_props answer mapped))
      })
    })

    <- state
  }

  <- (list props (list on_state void void void void))
})

results = ({
  props = (list
    40
    4
    (list
      "Played: 0" 
      "Win %: 0"
      "Current Streak: 0"
      "Max Streak: 0"
    )
  )


  on_state = {
    // only redrew when change is relevant
    curr = (list (get state USED) (get state APP_XY))
    prev = (if (is prev_state void) {
      <- void
    } {
      <- (list (get prev_state USED) (get prev_state APP_XY))
    })

    (if (not (is curr prev)) {
      r = (get state RESULTS)
      p = (sum r)
      win% = (if (greater_than p 0) {
        <- (integer (multiply (divide (subtract p (get r 6)) p) 100))
      } {
        <- 0
      })

      look = (list
        (join "Played: " (string p)) 
        (join "Win %: " (string win%))
        (join "Streak: " (string (get (get state STREAK) 0)))
        (join "Max Streak: " (string (get (get state STREAK) 1)))
      )

      (draw (dynamic_props results look))
    })

    <- state
  }

  <- (list props (list on_state void void void void))
})

create_bar_element = { x y what num ->
  props = (list
    (add x 57)
    (add y 4)
    (join what " " (inverse "") (inverse (string num)))
  )

  on_state = {
    element = (get elements listener_index)
    props = (get element 0)
    look = (get props 2)
    index = (subtract (integer (get (get props 2) 0)) 1)

    max = (max_positive (delete (get state RESULTS) 6))
    value = (get (get state RESULTS) index)
    len = (if (greater_than max 0) {
        <- (integer (multiply (divide value max) 10))
      } {
        <- 0
      })

    bar = (reduce (map (range len) {item _ -> <- " "}) {accum item _ -> <- (join accum item)} "")
    end = (reduce (map (range (subtract 11 len)) {item _ -> <- " "}) {accum item _ -> <- (join accum item)} "")
    // note: length is 24 cause string includes escape codes for inverse
    look = (join (string (add index 1)) " " (inverse bar) (inverse (string value)) end)
    (draw (dynamic_props element look))

    <- state
  }

  <- (list props (list on_state void void void void))
}

create_element_key = { x y letter ->
  props = (list
    (add x 40)
    (add y 13)
    (list 
      (list "┌""─""┐")
      (list "│" letter "│")
      (list "└""─""┘")
    )
  )

  on_state = {
    element = (get elements listener_index)
    props = (get element 0)
    look = (get props 2)
    letter = (get (get look 1) 1)

    // only redrew when change is relevant
    curr = (list (get state USED) (get state APP_XY))
    prev = (if (is prev_state void) {
      <- void
    } {
      <- (list (get prev_state USED) (get prev_state APP_XY))
    })

    (if (not (is curr prev)) {
      look = (if (is (find (get state USED) letter) void) {
        <- look
      } {
        final_letter_status = (reduce (get state STATUS) {accum guess_arr index ->
          // only change key look after word is submitted
          <- (if (less_than index (get state INPLAY)) {
            answer_arr = (str_to_arr (get state ANSWER))

            guessed_pos = (find guess_arr letter)
            <- (if (is guessed_pos void) {
              <- accum
            }{
              letter_status = (get_letter_status letter guessed_pos guess_arr answer_arr)

              <- (if (greater_than letter_status accum){
                <- letter_status
              }{
                <- accum
              })
            })
          }{
            <- accum
          })
        } 0)

        <- (set_background final_letter_status look)
      })

      (draw (dynamic_props element look))
    })

    <- state
  }

  on_click = {
    element = (get elements listener_index)
    props = (dynamic_props element void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      look = (get props 2)
      letter = (get (get look 1) 1)

      <- (mutaute_state_on_input state letter)
    } {
      <- state
    })

    <- state
  }

  <- (list props (list on_state void void void on_click))
}

enter_key = ({
  props = (list
    40
    19
    (list 
      (list "┌""─""─""─""┐")
      (list "│"" ""↩"" ""│")
      (list "└""─""─""─""┘")
    )
  )

  on_state = {
    // only redrew when change is relevant
    curr = (list (get state APP_XY))
    prev = (if (is prev_state void) {
      <- void
    } {
      <- (list (get prev_state APP_XY))
    })

    (if (not (is curr prev)) {
      (draw (dynamic_props enter_key void))
    })

    <- state
  }

  on_click = {
    props = (dynamic_props enter_key void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (mutaute_state_on_input state "\n")
    } {
      <- state
    })

    <- state
  }

  <- (list props (list on_state void void void on_click))
})

delete_key = ({
  props = (list
    66
    19
    (list 
      (list "┌""─""─""┐")
      (list "│"" ""⌫""│")
      (list "└""─""─""┘")
    )
  )

  on_state = {
    // only redrew when change is relevant
    curr = (list (get state APP_XY))
    prev = (if (is prev_state void) {
      <- void
    } {
      <- (list (get prev_state APP_XY))
    })

    (if (not (is curr prev)) {
      (draw (dynamic_props delete_key void))
    })

    <- state
  }

  on_click = {
    props = (dynamic_props delete_key void)

    <- (if (is (mouse_over props mouse_xy) 1) {
      <- (mutaute_state_on_input state "delete")
    } {
      <- state
    })

    <- state
  }

  <- (list props (list on_state void void void on_click))
})

keys = (list
  (list "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P")
  (list "A" "S" "D" "F" "G" "H" "J" "K" "L")
  (list "Z" "X" "C" "V" "B" "N" "M" )
)

kb = (reduce keys { line_accum key_line line_index ->
  <- (reduce key_line { accum item index -> 
    <- (insert accum (create_element_key (add (multiply line_index 2) (integer (divide line_index 2)) (multiply index 3)) (multiply line_index 3) item)) 
  } line_accum)
} (list))

kb = (insert kb enter_key)
kb = (insert kb delete_key)

stats = (list "1" "2" "3" "4" "5" "6")

graphs = (reduce stats { accum item index -> 
  <- (insert accum (create_bar_element 0 index item 0)) 
} (list))

el = (list 
  screen
  centered_modal
  title
  button_exit
  board
  answer
  results
  button_next
)

elements = (join kb graphs el)
